/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.24.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { Addr, Config, CodeIds, ExecuteMsg, Uint128, Coin, InstantiateMsg, QueryMsg } from "./Factory.types";
export interface FactoryReadOnlyInterface {
  contractAddress: string;
  getConfig: () => Promise<GetConfigResponse>;
  getCampaigns: ({
    limit,
    startAfter
  }: {
    limit?: number;
    startAfter?: string;
  }) => Promise<GetCampaignsResponse>;
}
export class FactoryQueryClient implements FactoryReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.getConfig = this.getConfig.bind(this);
    this.getCampaigns = this.getCampaigns.bind(this);
  }

  getConfig = async (): Promise<GetConfigResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_config: {}
    });
  };
  getCampaigns = async ({
    limit,
    startAfter
  }: {
    limit?: number;
    startAfter?: string;
  }): Promise<GetCampaignsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_campaigns: {
        limit,
        start_after: startAfter
      }
    });
  };
}
export interface FactoryInterface extends FactoryReadOnlyInterface {
  contractAddress: string;
  sender: string;
  createCampaign: ({
    expiration,
    goal,
    name,
    recipient
  }: {
    expiration: number;
    goal: Coin;
    name: string;
    recipient: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  updateConfig: ({
    admin,
    codeIds
  }: {
    admin?: Addr;
    codeIds: CodeIds;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
export class FactoryClient extends FactoryQueryClient implements FactoryInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.createCampaign = this.createCampaign.bind(this);
    this.updateConfig = this.updateConfig.bind(this);
  }

  createCampaign = async ({
    expiration,
    goal,
    name,
    recipient
  }: {
    expiration: number;
    goal: Coin;
    name: string;
    recipient: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      create_campaign: {
        expiration,
        goal,
        name,
        recipient
      }
    }, fee, memo, funds);
  };
  updateConfig = async ({
    admin,
    codeIds
  }: {
    admin?: Addr;
    codeIds: CodeIds;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_config: {
        admin,
        code_ids: codeIds
      }
    }, fee, memo, funds);
  };
}